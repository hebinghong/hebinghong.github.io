(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{332:function(e,r,t){"use strict";t.r(r);var v=t(0),a=Object(v.a)({},function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"appveyor-docker-镜像制作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#appveyor-docker-镜像制作","aria-hidden":"true"}},[e._v("#")]),e._v(" appveyor docker 镜像制作")]),e._v(" "),t("ul",[t("li",[e._v("appveyor 是由 asp.net core 开发的 CI/CD 产品，也是之前少数支持 windows 环境的 CI/CD 产品之一。由于容器技术发展极快，利用容器的能力，可轻松快速拉取所需各种环境。从这一点上看，各产品之间，个人感觉差异并不大，主要还是看各家侧重点。今天要提的，其实是它内部的 nuget feed 功能，即将它作为 nuget 包源")])]),e._v(" "),t("h2",{attrs:{id:"为什么选择它"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么选择它","aria-hidden":"true"}},[e._v("#")]),e._v(" 为什么选择它")]),e._v(" "),t("ul",[t("li",[e._v("我们的目标是自托管一个私有 nuget 源，部署在服务器并且不是在内网，任何开发机通过公网 ip 可访问，并需要需要认证")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/nuget/hosting-packages/overview",target:"_blank",rel:"noopener noreferrer"}},[e._v("此处"),t("OutboundLink")],1),e._v("介绍了几款产品\n"),t("ul",[t("li",[e._v("Azure Artifacts 也可通过 Team Foundation Server 2017 以及更高版本获得。")]),e._v(" "),t("li",[e._v("MyGet")]),e._v(" "),t("li",[e._v("Inedo 的 ProGet")]),e._v(" "),t("li",[e._v("NuGet 服务器，Inedo 的社区项目")]),e._v(" "),t("li",[e._v("NuGet 服务器（开放源代码），与 Inedo 的 NuGet 服务器相似的开放源代码实现")]),e._v(" "),t("li",[e._v("LiGet：在 docker 中 kestrel 上运行的 NuGet V2 服务器的开放源代码实现")]),e._v(" "),t("li",[e._v("BaGet 构建与 ASP.NET Core 基础上的 NuGet V3 服务器的开源实现")]),e._v(" "),t("li",[e._v("Sleet（开放源代码 NuGet V3 静态源生成器）")]),e._v(" "),t("li",[e._v("JFrog 的 Artifactory。")]),e._v(" "),t("li",[e._v("Sonatype 的 Nexus。")]),e._v(" "),t("li",[e._v("JetBrains 的 TeamCity。")])])]),e._v(" "),t("li",[e._v("其中大部分不能自托管，需要买服务，一部分复杂难用，有的还不支持私有源访问认证")]),e._v(" "),t("li",[e._v("符合要求的基本都是 CI/CD 产品中的 nuget 功能，其中 appveyor 是发现的最简单易用的")])]),e._v(" "),t("h2",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),t("ul",[t("li",[e._v("官网安装说明 https://www.appveyor.com/docs/server/")]),e._v(" "),t("li",[e._v("官网提供 windows 和 linux 的两种安装方式，都是安装包，并没有 docker 方式，我们希望通过 docker 来安装部署，因此需要制作一个镜像")]),e._v(" "),t("li",[e._v("这里给出制作好的地址 https://hub.docker.com/r/xxred/appveyor")]),e._v(" "),t("li",[e._v("安装命令 "),t("code",[e._v("docker run --restart always --name appveyor -d -p 80:80 -v appveyor_config:/etc/opt/appveyor/server -v appveyor_data:/var/opt/appveyor/server xxred/appveyor")])])]),e._v(" "),t("h2",{attrs:{id:"制作过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#制作过程","aria-hidden":"true"}},[e._v("#")]),e._v(" 制作过程")]),e._v(" "),t("ul",[t("li",[e._v("首先根据官方说明，使用 ubuntu18.04 镜像进行实验")]),e._v(" "),t("li",[t("code",[e._v("apt update && apt install wget dpkg libcap2-bin")]),e._v("，wget 用来下载安装包，dpkg 用来安装 deb 软件包，libcap2-bin 则是安装包依赖的包")]),e._v(" "),t("li",[e._v("如果嫌更新速度慢，可更换软件源，参考 https://www.jianshu.com/p/e5677ebd5341")]),e._v(" "),t("li",[e._v("下载安装包 "),t("code",[e._v("wget https://www.appveyor.com/downloads/appveyor-server/7.0/linux/appveyor-server_7.0.2184_amd64.deb -O appveyor-server.deb")])]),e._v(" "),t("li",[e._v("一切准备就绪，执行"),t("code",[e._v("dpkg -i appveyor-server.deb")]),e._v("进行安装")]),e._v(" "),t("li",[e._v("安装完成之后，如果是 ubuntu 物理机，那么应该已经自动注册服务运行了，但在容器里须得手动运行，执行命令"),t("code",[e._v("./opt/appveyor/server/appveyor-server")])]),e._v(" "),t("li",[e._v("这个时候会报缺少包的错误，或者是一个全局配置错误，所有的问题都可以通过安装缺失的包来解决")]),e._v(" "),t("li",[e._v("appveyor 由 asp.net core 开发，镜像环境参考 https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x#supported-linux-versions 此处列举了运行 asp.net core 的系统及其需要安装的包")]),e._v(" "),t("li",[e._v("asp.net core 自包含相关资料参考 https://github.com/dotnet/core/blob/master/Documentation/self-contained-linux-apps.md")]),e._v(" "),t("li",[e._v("安装完 asp.net core 所依赖的包即可正常运行应用，此时测试完成")]),e._v(" "),t("li",[e._v("将此容器打包成镜像即可")])]),e._v(" "),t("h2",{attrs:{id:"制作-dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#制作-dockerfile","aria-hidden":"true"}},[e._v("#")]),e._v(" 制作 Dockerfile")]),e._v(" "),t("ul",[t("li",[e._v("Dockerfile 命令 https://docs.docker.com/engine/reference/builder/")]),e._v(" "),t("li",[e._v("特别注意 dockerfile 指令"),t("code",[e._v("ADD")]),e._v("和"),t("code",[e._v("COPY")]),e._v("的区别 https://www.cnblogs.com/sparkdev/p/9573248.html")]),e._v(" "),t("li",[e._v("大概分为以下几步：选择基础镜像、准备需要的文件、导出需要暴露的端口、卷设置、容器运行执行的命令")]),e._v(" "),t("li",[e._v("首先是基础镜像选择 https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps 这里可以找到合适的 asp.net core 环境，大多数需要的依赖均已安装，直接使用即可")]),e._v(" "),t("li",[e._v("所以我们只需要下载安装包，然后进行安装，得到解压后的应用文件。这一步可以进行优化，参考"),t("a",{attrs:{href:"https://www.jianshu.com/p/beef99160219",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ubuntu 下制作 Nginx deb 安装包"),t("OutboundLink")],1),e._v("，得到安装 deb 包运行的脚本，自行设置")]),e._v(" "),t("li",[e._v("即通过"),t("code",[e._v("dpkg -e appveyor-server.deb")]),e._v("命令得到包的元数据，以"),t("code",[e._v("ubuntu18.04")]),e._v("镜像而不是微软提供的镜像作为基础镜像，可以较少需要安装的包，进一步减少镜像体积。通过执行 deb 的安装脚本，达到安装的目的。最后自行安装缺失的包即可。理论上可以在其他体积更小的镜像中运行，比如 alpine")]),e._v(" "),t("li",[e._v("为了快速完成镜像制作，得到以下 Dockerfile，而没有进行其他优化")])]),e._v(" "),t("div",{staticClass:"language-Dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('FROM ubuntu:18.04 as download\nWORKDIR /tmp\nRUN apt update\nRUN apt install wget -y\nRUN wget https://www.appveyor.com/downloads/appveyor-server/7.0/linux/appveyor-server_7.0.2184_amd64.deb -O appveyor-server.deb\nFROM mcr.microsoft.com/dotnet/core/runtime-deps:2.2.5-bionic\nRUN apt update\nRUN apt install libcap2-bin -y\nCOPY --from=download /tmp/appveyor-server.deb /tmp/\nRUN dpkg -i /tmp/appveyor-server.deb\nRUN cd /tmp && rm -f *\nWORKDIR /opt/appveyor/server\nEXPOSE 80 443\nVOLUME [ "/etc/opt/appveyor/server" ]\nVOLUME [ "/var/opt/appveyor/server" ]\nENTRYPOINT [ "./appveyor-server" ]\n')])])]),t("h2",{attrs:{id:"运行及使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行及使用","aria-hidden":"true"}},[e._v("#")]),e._v(" 运行及使用")]),e._v(" "),t("ul",[t("li",[e._v("执行命令安装 "),t("code",[e._v("docker run --restart always --name appveyor -d -p 80:80 -v appveyor_config:/etc/opt/appveyor/server -v appveyor_data:/var/opt/appveyor/server xxred/appveyor")]),e._v("，然后在浏览器访问，设置密码即可")]),e._v(" "),t("li",[e._v("进到主页面，选择"),t("code",[e._v("Account")]),e._v("栏目，左边选项卡选择"),t("code",[e._v("Nuget")]),e._v("，稍等片刻即可看到账号级别的 NuGet feed 和相应 API key")]),e._v(" "),t("li",[e._v("使用下面的命令推送一个 nuget 包进行测试，将 nuget 包源地址添加到 Nuget Source，选择该包源搜索包，即可看到弹窗要求进行验证，输入刚刚设置的账号密码即可")])]),e._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("ul",[t("li",[e._v("Nuget 包私有源作为公司内部包管理之一，可有效管理多个 dll，减轻升级 dll 的成本")]),e._v(" "),t("li",[e._v("将更多功能独立成一个 dll，各系统按需引入，加快新系统搭建速度")]),e._v(" "),t("li",[e._v("逐步建立公司公共基础库，常用业务库等，nuget 包管理发至关重要的作用")])])])},[],!1,null,null,null);r.default=a.exports}}]);